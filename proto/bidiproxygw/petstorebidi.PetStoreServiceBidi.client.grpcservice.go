// This file registers with grpc service. This file was auto-generated by mashling at
	// 2019-05-14 15:40:20.19571578 +0530 IST m=+0.046342840
	package bidiproxygw

	import (
		"context"
		
		"errors"
		
		"strings"
		"io"
		
		"log"
		

		servInfo "github.com/project-flogo/grpc/activity"
		"google.golang.org/grpc"
	)
	
	
	
	type clientServicepetstorebidiPetStoreServiceBidiclient struct {
		serviceInfo *servInfo.ServiceInfo
	}

	var serviceInfopetstorebidiPetStoreServiceBidiclient = &servInfo.ServiceInfo{
		ProtoName: "petstorebidi",
		ServiceName: "PetStoreServiceBidi",
	}

	func init() {
		servInfo.ClientServiceRegistery.RegisterClientService(&clientServicepetstorebidiPetStoreServiceBidiclient{serviceInfo: serviceInfopetstorebidiPetStoreServiceBidiclient})
	}

	//GetRegisteredClientService returns client implimentaion stub with grpc connection
	func (cs *clientServicepetstorebidiPetStoreServiceBidiclient) GetRegisteredClientService(gCC *grpc.ClientConn) interface{} {
		return NewPetStoreServiceBidiClient(gCC)
	}

	func (cs *clientServicepetstorebidiPetStoreServiceBidiclient) ServiceInfo() *servInfo.ServiceInfo {
		return cs.serviceInfo
	}

	func (cs *clientServicepetstorebidiPetStoreServiceBidiclient) InvokeMethod(reqArr map[string]interface{}) map[string]interface{} {

		clientObject := reqArr["ClientObject"].(PetStoreServiceBidiClient)
		methodName := reqArr["MethodName"].(string)

		switch methodName {
		case "BulkUsers":
			return BulkUsers(clientObject, reqArr)
		}

		resMap := make(map[string]interface{},2)
		resMap["Response"] = []byte("null")
		resMap["Error"] = errors.New("Method not Available: " + methodName)
		return resMap
	}

	func BulkUsers(client PetStoreServiceBidiClient, reqArr map[string]interface{}) map[string]interface{} {
		resMap := make(map[string]interface{}, 1)

		if reqArr["Mode"] != nil {
			mode := reqArr["Mode"].(string)
			if strings.Compare(mode,"rest-to-grpc") == 0 {
				resMap["Error"] = errors.New("streaming operation is not allowed in rest to grpc case")
				return resMap
			}
		}

		bReq := reqArr["strmReq"].(PetStoreServiceBidi_BulkUsersServer)

		stream, err := client.BulkUsers(context.Background())
		if err != nil {
			log.Println("error while getting stream object for BulkUsers:", err)
			resMap["Error"] = err
			return resMap
		}

		waits := make(chan struct{})
		go func() {
			for {
				obj, err := bReq.Recv()
				if err == io.EOF {
					resMap["Error"] = nil
					stream.CloseSend()
					close(waits)
					return
				}
				if err != nil {
					log.Println("error occured in BulkUsers bidi Recv():", err)
					resMap["Error"] = err
					close(waits)
					return
				}
				if err := stream.Send(obj); err != nil {
					log.Println("error while sending obj with stream:", err)
					resMap["Error"] = err
					close(waits)
					return
				}
			}
		}()

		waitc := make(chan struct{})
		go func() {
			for {
				obj, err := stream.Recv()
				if err == io.EOF {
					resMap["Error"] = nil
					close(waitc)
					return
				}
				if err != nil {
					log.Println("erorr occured in BulkUsers stream Recv():", err)
					resMap["Error"] = err
					close(waitc)
					return
				}
				if sdErr := bReq.Send(obj); sdErr != nil {
					log.Println("error while sending obj with bidi Send():", sdErr)
					resMap["Error"] = sdErr
					close(waitc)
					return
				}
			}
		}()
		<-waitc
		<-waits
		return resMap
	}

	