// This file registers with grpc service. This file was auto-generated by mashling at
	// 2018-12-12 16:03:56.262412907 -0700 MST m=+0.025831704
	package rest2grpc

	import (
		"context"
		
		"encoding/json"
		"github.com/project-flogo/grpc/support"
		
		"errors"
		
		"log"
		

		servInfo "github.com/project-flogo/grpc/activity"
		"google.golang.org/grpc"
	)
	
	
	
	type clientServicepetstoreRest2GRPCPetStoreServiceclient struct {
		serviceInfo *servInfo.ServiceInfo
	}

	var serviceInfopetstoreRest2GRPCPetStoreServiceclient = &servInfo.ServiceInfo{
		ProtoName: "petstore",
		ServiceName: "Rest2GRPCPetStoreService",
	}

	func init() {
		servInfo.ClientServiceRegistery.RegisterClientService(&clientServicepetstoreRest2GRPCPetStoreServiceclient{serviceInfo: serviceInfopetstoreRest2GRPCPetStoreServiceclient})
	}

	//GetRegisteredClientService returns client implimentaion stub with grpc connection
	func (cs *clientServicepetstoreRest2GRPCPetStoreServiceclient) GetRegisteredClientService(gCC *grpc.ClientConn) interface{} {
		return NewRest2GRPCPetStoreServiceClient(gCC)
	}

	func (cs *clientServicepetstoreRest2GRPCPetStoreServiceclient) ServiceInfo() *servInfo.ServiceInfo {
		return cs.serviceInfo
	}

	func (cs *clientServicepetstoreRest2GRPCPetStoreServiceclient) InvokeMethod(reqArr map[string]interface{}) map[string]interface{} {

		clientObject := reqArr["ClientObject"].(Rest2GRPCPetStoreServiceClient)
		methodName := reqArr["MethodName"].(string)

		switch methodName {
		case "PetById":
			return PetById(clientObject, reqArr)
		case "UserByName":
			return UserByName(clientObject, reqArr)
		case "PetPUT":
			return PetPUT(clientObject, reqArr)
		case "UserPUT":
			return UserPUT(clientObject, reqArr)
		}

		resMap := make(map[string]interface{},2)
		resMap["Response"] = []byte("null")
		resMap["Error"] = errors.New("Method not Available: " + methodName)
		return resMap
	}
	func PetById(client Rest2GRPCPetStoreServiceClient, values interface{}) map[string]interface{} {
		req := &PetByIdRequest{}
		support.AssignStructValues(req, values)
		res, err := client.PetById(context.Background(), req)
		b, errMarshl := json.Marshal(res)
		if errMarshl != nil {
			log.Println("Error: ", errMarshl)
			return nil
		}

		resMap := make(map[string]interface{}, 2)
		resMap["Response"] = b
		resMap["Error"] = err
		return resMap
	}
	func UserByName(client Rest2GRPCPetStoreServiceClient, values interface{}) map[string]interface{} {
		req := &UserByNameRequest{}
		support.AssignStructValues(req, values)
		res, err := client.UserByName(context.Background(), req)
		b, errMarshl := json.Marshal(res)
		if errMarshl != nil {
			log.Println("Error: ", errMarshl)
			return nil
		}

		resMap := make(map[string]interface{}, 2)
		resMap["Response"] = b
		resMap["Error"] = err
		return resMap
	}
	func PetPUT(client Rest2GRPCPetStoreServiceClient, values interface{}) map[string]interface{} {
		req := &PetRequest{}
		support.AssignStructValues(req, values)
		res, err := client.PetPUT(context.Background(), req)
		b, errMarshl := json.Marshal(res)
		if errMarshl != nil {
			log.Println("Error: ", errMarshl)
			return nil
		}

		resMap := make(map[string]interface{}, 2)
		resMap["Response"] = b
		resMap["Error"] = err
		return resMap
	}
	func UserPUT(client Rest2GRPCPetStoreServiceClient, values interface{}) map[string]interface{} {
		req := &UserRequest{}
		support.AssignStructValues(req, values)
		res, err := client.UserPUT(context.Background(), req)
		b, errMarshl := json.Marshal(res)
		if errMarshl != nil {
			log.Println("Error: ", errMarshl)
			return nil
		}

		resMap := make(map[string]interface{}, 2)
		resMap["Response"] = b
		resMap["Error"] = err
		return resMap
	}

	