// This file registers with grpc service. This file was auto-generated by mashling at
// 2018-12-12 13:02:32.749227615 -0700 MST m=+0.031405704
package grpc2rest

import (
	"encoding/json"
	"fmt"
	"strings"

	"golang.org/x/net/context"

	"errors"
	"log"

	"github.com/golang/protobuf/jsonpb"
	servInfo "github.com/project-flogo/grpc/trigger/grpc"
	"google.golang.org/grpc"
)

type serviceImplpetstoreGRPC2RestPetStoreServiceserver struct {
	trigger     *servInfo.Trigger
	serviceInfo *servInfo.ServiceInfo
}

var serviceInfopetstoreGRPC2RestPetStoreServiceserver = &servInfo.ServiceInfo{
	ProtoName:   "petstore",
	ServiceName: "GRPC2RestPetStoreService",
}

func init() {
	servInfo.ServiceRegistery.RegisterServerService(&serviceImplpetstoreGRPC2RestPetStoreServiceserver{serviceInfo: serviceInfopetstoreGRPC2RestPetStoreServiceserver})
}

// RunRegisterServerService registers server method implimentaion with grpc
func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) RunRegisterServerService(serv *grpc.Server, trigger *servInfo.Trigger) {
	service := &serviceImplpetstoreGRPC2RestPetStoreServiceserver{
		trigger:     trigger,
		serviceInfo: serviceInfopetstoreGRPC2RestPetStoreServiceserver,
	}
	RegisterGRPC2RestPetStoreServiceServer(serv, service)
}

func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) PetById(ctx context.Context, req *PetByIdRequest) (res *PetResponse, err error) {

	methodName := "PetById"
	serviceName := "GRPC2RestPetStoreService"

	grpcData := make(map[string]interface{})
	grpcData["methodName"] = methodName
	grpcData["serviceName"] = serviceName
	grpcData["contextdata"] = ctx
	grpcData["reqdata"] = req

	_, replyData, err := s.trigger.CallHandler(grpcData)

	if err != nil {
		log.Println("error: ", err)
		return nil, err
	}

	typeHandRes := fmt.Sprintf("%T", replyData)
	if strings.Compare(typeHandRes, "*status.statusError") == 0 {
		return res, replyData.(error)
	}
	typeMethodRes := fmt.Sprintf("%T", res)
	if strings.Compare(typeHandRes, typeMethodRes) == 0 {
		res = replyData.(*PetResponse)
	} else if replyData != nil {
		var errValue = replyData.(map[string]interface{})["error"]
		if errValue != nil && len(errValue.(string)) != 0 {
			return res, errors.New(errValue.(string))
		} else {
			rDBytes, err := json.Marshal(replyData)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
			res = &PetResponse{}
			err = jsonpb.UnmarshalString(string(rDBytes), res)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
		}
	} else {
		return nil, errors.New("Exception at gateway end")
	}
	//log.Println("response: ", res)

	//User implementation area

	return res, err
}

func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) UserByName(ctx context.Context, req *UserByNameRequest) (res *UserResponse, err error) {

	methodName := "UserByName"
	serviceName := "GRPC2RestPetStoreService"

	grpcData := make(map[string]interface{})
	grpcData["methodName"] = methodName
	grpcData["serviceName"] = serviceName
	grpcData["contextdata"] = ctx
	grpcData["reqdata"] = req

	_, replyData, err := s.trigger.CallHandler(grpcData)

	if err != nil {
		log.Println("error: ", err)
		return nil, err
	}

	typeHandRes := fmt.Sprintf("%T", replyData)
	if strings.Compare(typeHandRes, "*status.statusError") == 0 {
		return res, replyData.(error)
	}
	typeMethodRes := fmt.Sprintf("%T", res)
	if strings.Compare(typeHandRes, typeMethodRes) == 0 {
		res = replyData.(*UserResponse)
	} else if replyData != nil {
		var errValue = replyData.(map[string]interface{})["error"]
		if errValue != nil && len(errValue.(string)) != 0 {
			return res, errors.New(errValue.(string))
		} else {
			rDBytes, err := json.Marshal(replyData)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
			res = &UserResponse{}
			err = jsonpb.UnmarshalString(string(rDBytes), res)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
		}
	} else {
		return nil, errors.New("Exception at gateway end")
	}
	//log.Println("response: ", res)

	//User implementation area

	return res, err
}

func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) PetPUT(ctx context.Context, req *PetRequest) (res *PetResponse, err error) {

	methodName := "PetPUT"
	serviceName := "GRPC2RestPetStoreService"

	grpcData := make(map[string]interface{})
	grpcData["methodName"] = methodName
	grpcData["serviceName"] = serviceName
	grpcData["contextdata"] = ctx
	grpcData["reqdata"] = req

	_, replyData, err := s.trigger.CallHandler(grpcData)

	if err != nil {
		log.Println("error: ", err)
		return nil, err
	}

	typeHandRes := fmt.Sprintf("%T", replyData)
	if strings.Compare(typeHandRes, "*status.statusError") == 0 {
		return res, replyData.(error)
	}
	typeMethodRes := fmt.Sprintf("%T", res)
	if strings.Compare(typeHandRes, typeMethodRes) == 0 {
		res = replyData.(*PetResponse)
	} else if replyData != nil {
		var errValue = replyData.(map[string]interface{})["error"]
		if errValue != nil && len(errValue.(string)) != 0 {
			return res, errors.New(errValue.(string))
		} else {
			rDBytes, err := json.Marshal(replyData)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
			res = &PetResponse{}
			err = jsonpb.UnmarshalString(string(rDBytes), res)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
		}
	} else {
		return nil, errors.New("Exception at gateway end")
	}
	//log.Println("response: ", res)

	//User implementation area

	return res, err
}

func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) UserPUT(ctx context.Context, req *UserRequest) (res *UserResponse, err error) {

	methodName := "UserPUT"
	serviceName := "GRPC2RestPetStoreService"

	grpcData := make(map[string]interface{})
	grpcData["methodName"] = methodName
	grpcData["serviceName"] = serviceName
	grpcData["contextdata"] = ctx
	grpcData["reqdata"] = req

	_, replyData, err := s.trigger.CallHandler(grpcData)

	if err != nil {
		log.Println("error: ", err)
		return nil, err
	}

	typeHandRes := fmt.Sprintf("%T", replyData)
	if strings.Compare(typeHandRes, "*status.statusError") == 0 {
		return res, replyData.(error)
	}
	typeMethodRes := fmt.Sprintf("%T", res)
	if strings.Compare(typeHandRes, typeMethodRes) == 0 {
		res = replyData.(*UserResponse)
	} else if replyData != nil {
		var errValue = replyData.(map[string]interface{})["error"]
		if errValue != nil && len(errValue.(string)) != 0 {
			return res, errors.New(errValue.(string))
		} else {
			rDBytes, err := json.Marshal(replyData)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
			res = &UserResponse{}
			err = jsonpb.UnmarshalString(string(rDBytes), res)
			if err != nil {
				log.Println("error: ", err)
				return res, err
			}
		}
	} else {
		return nil, errors.New("Exception at gateway end")
	}
	//log.Println("response: ", res)

	//User implementation area

	return res, err
}

func (s *serviceImplpetstoreGRPC2RestPetStoreServiceserver) ServiceInfo() *servInfo.ServiceInfo {
	return s.serviceInfo
}
